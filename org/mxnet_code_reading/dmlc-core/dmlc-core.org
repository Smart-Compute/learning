#+TITLE: dmlc-core
* Links
- [[https://github.com/dmlc/dmlc-core][github源码]]
- [[https://dmlc-core.readthedocs.io/en/latest/parameter.html][readthedocs文档]]
- [[https://www.cnblogs.com/heguanyou/p/7613191.html][MXNet--DMLC-Core代码解读与宏 - Thaurun - 博客园]] 还没看完

* 文档阅读(细节看文档)
** Parameter Structure for Machine Learning
*** Use Parameter Module
**** Declare the Parameter
#+BEGIN_SRC c++
#include <dmlc/parameter.h>

// declare the parameter, normally put it in header file.
struct MyParam : public dmlc::Parameter<MyParam> {
  float learning_rate;
  int num_hidden;
  int activation;
  std::string name;
  // declare parameters
  DMLC_DECLARE_PARAMETER(MyParam) {
    DMLC_DECLARE_FIELD(num_hidden).set_range(0, 1000)
        .describe("Number of hidden unit in the fully connected layer.");
    DMLC_DECLARE_FIELD(learning_rate).set_default(0.01f)
        .describe("Learning rate of SGD optimization.");
    DMLC_DECLARE_FIELD(activation).add_enum("relu", 1).add_enum("sigmoid", 2)
        .describe("Activation function type.");
    DMLC_DECLARE_FIELD(name).set_default("layer")
        .describe("Name of the net.");
  }
};

// register the parameter, this is normally in a cc file.
DMLC_REGISTER_PARAMETER(MyParam);
#+END_SRC

**** Set the Parameter
#+BEGIN_SRC c++
int main() {
   MyParam param;
   std::vector<std::pair<std::string, std::string> > param_data = {
     {"num_hidden", "100"},
     {"activation", "relu"},
     {"name", "myname"}
   };
   // set the parameters
   param.Init(param_data);
   return 0;
}
#+END_SRC

~param.Init(param_data)~ 还会自动检查参数范围是否满足要求并抛出 ~dmlc::ParamError~ 异常

**** Generate Human Readable Docstrings
#+BEGIN_SRC c++
std::string docstring = MyParam::__DOC__();
// more structured way
std::vector<dmlc::ParamFieldInfo> fields = MyParam::__FIELDS__();
#+END_SRC

**** Serialization of Parameter
~std::map<string, string> dict = param.__DICT__();~

**** Play with an Example
[[https://github.com/dmlc/dmlc-core/blob/master/example/parameter.cc][example/parameter.cc]]
#+BEGIN_SRC c++
// This is an example program showing usage of parameter module
// Build, on root folder, type
//
//   make example
//
// Example usage:
//
//   example/parameter num_hidden=100 name=aaa activation=relu
//

#include <dmlc/parameter.h>

struct MyParam : public dmlc::Parameter<MyParam> {
  float learning_rate;
  int num_hidden;
  int activation;
  std::string name;
  // declare parameters in header file
  DMLC_DECLARE_PARAMETER(MyParam) {
    DMLC_DECLARE_FIELD(num_hidden).set_range(0, 1000)
        .describe("Number of hidden unit in the fully connected layer.");
    DMLC_DECLARE_FIELD(learning_rate).set_default(0.01f)
        .describe("Learning rate of SGD optimization.");
    DMLC_DECLARE_FIELD(activation).add_enum("relu", 1).add_enum("sigmoid", 2)
        .describe("Activation function type.");
    DMLC_DECLARE_FIELD(name).set_default("mnet")
        .describe("Name of the net.");

    // user can also set nhidden besides num_hidden
    DMLC_DECLARE_ALIAS(num_hidden, nhidden);
    DMLC_DECLARE_ALIAS(activation, act);
  }
};

// register it in cc file
DMLC_REGISTER_PARAMETER(MyParam);


int main(int argc, char *argv[]) {
  if (argc == 1) {
    printf("Usage: [key=value] ...\n");
    return 0;
  }

  MyParam param;
  std::map<std::string, std::string> kwargs;
  for (int i = 0; i < argc; ++i) {
    char name[256], val[256];
    if (sscanf(argv[i], "%[^=]=%[^\n]", name, val) == 2) {
      kwargs[name] = val;
    }
  }
  printf("Docstring\n---------\n%s", MyParam::__DOC__().c_str());

  printf("start to set parameters ...\n");
  param.Init(kwargs);
  printf("-----\n");
  printf("param.num_hidden=%d\n", param.num_hidden);
  printf("param.learning_rate=%f\n", param.learning_rate);
  printf("param.name=%s\n", param.name.c_str());
  printf("param.activation=%d\n", param.activation);
  return 0;
}
#+END_SRC

*** How does it work

下面代码如何正确执行Init函数
#+BEGIN_SRC c++
#include <vector>
#include <string>
#include <dmlc/parameter.h>

// declare the parameter, normally put it in header file.
struct MyParam : public dmlc::Parameter<MyParam> {
  float learning_rate;
  int num_hidden;
  // declare parameters
  DMLC_DECLARE_PARAMETER(MyParam) {
    DMLC_DECLARE_FIELD(num_hidden);
    DMLC_DECLARE_FIELD(learning_rate).set_default(0.01f);
  }
};

// register the parameter, this is normally in a cc file.
DMLC_REGISTER_PARAMETER(MyParam);

int main(int argc, char *argv[]) {
  MyParam param;
  std::vector<std::pair<std::string, std::string> > param_data = {
    {"num_hidden", "100"},
  };
  param.Init(param_data);
  return 0;
}
#+END_SRC

使用宏

#+BEGIN_SRC c++
struct Parameter<MyParam> {
  template<typename ValueType>
  inline FieldEntry<ValueType>&
  DECLARE(ParamManagerSingleton<MyParam> *manager,
          const std::string& key,
          ValueType& ref){
    // offset gives a generic way to access the address of the field
    // from beginning of the structure.
    size_t offset = ((char*)&ref - (char*)this);
    parameter::FieldEntry<ValueType> *e =
        new parameter::FieldEntry<ValueType>(key, offset);
    manager->AddEntry(key, e);
    return *e;
  }
};

struct MyParam : public dmlc::Parameter<MyParam> {
  float learning_rate;
  int num_hidden;
  // declare parameters
  inline void __DECLARE__(ParamManagerSingleton<MyParam> *manager) {
    this->DECLARE(manager, "num_hidden", num_hidden);
    this->DECLARE(manager, "learning_rate", learning_rate).set_default(0.01f);
  }
};

// This code is only used to show the general idea.
// This code will only run once, the real code is done via singleton declaration pattern.
{
  static ParamManagerSingleton<MyParam> manager;
  MyParam tmp;
  tmp->__DECLARE__(&manager);
}
#+END_SRC
